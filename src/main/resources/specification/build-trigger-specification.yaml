openapi: "3.0.2"
info:
  version: 11.23.0
  title: API сервиса по триггеру билдов
  description: API сервиса по триггеру билдов

servers:
  - url: /

tags:
  - name: Trigger
    description: Функционал для управления триггерами

paths:
  /trigger/{id}:
    get:
      tags:
        - Trigger
      description: Получение данных триггера по идентификатору
      summary: Получение данных триггера по идентификатору
      parameters:
        - name: id
          in: path
          description: Уникальный идентификатор триггера
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Ответ на запрос на получение данных триггера по идентификатору
          content:
            application/json:
              schema:
                type: object
                title: GetBuildTriggerByIdResponse
                description: Ответ на запрос на получение данных триггера по идентификатору
                allOf:
                  - $ref: '#/components/schemas/BuildTriggerExtendedData'
        400:
          $ref: '#/components/schemas/InvalidArgument'
        422:
          description: Произошла логическая ошибка при обработке запроса
          content:
            application/json:
              schema:
                type: object
                description: Логические ошибки выполнения запроса
                title: GetBuildTriggerByIdError
                properties:
                  code:
                    type: string
                    description: |
                      Коды ошибок:
                        * TriggerNotFound - Триггер не найден по идентификатору
                    enum:
                      - TriggerNotFound
                    example: TriggerNotFound
                  message:
                    type: string
                    description: Краткое описание ошибки
                required:
                  - code
        500:
          $ref: '#/components/schemas/TechnicalError'

    delete:
      tags:
        - Trigger
      description: Удаление данных триггера по идентификатору
      summary: Удаление данных триггера по идентификатору
      parameters:
        - name: id
          in: path
          description: Уникальный идентификатор удаляемого триггера
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Удаление выполнено успешно
        400:
          $ref: '#/components/schemas/InvalidArgument'
        422:
          description: Произошла логическая ошибка при обработке запроса
          content:
            application/json:
              schema:
                type: object
                description: Логические ошибки выполнения запроса
                title: DeleteBuildTriggerError
                properties:
                  code:
                    type: string
                    description: |
                      Коды ошибок:
                        * TriggerNotFound - Триггер не найден по идентификатору
                        * TriggerIsLocked - Триггер заблокирован, необходимо повторить операцию позже
                    enum:
                      - TriggerNotFound
                      - TriggerIsLocked
                    example: TriggerIsLocked
                  message:
                    type: string
                    description: Краткое описание ошибки
                required:
                  - code
        500:
          $ref: '#/components/schemas/TechnicalError'

  /trigger/create:
    post:
      tags:
        - Trigger
      description: Создание нового триггера сборок
      summary: Создание нового триггера сборок
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: CreateBuildTriggerRequest
              description: Запрос на создание триггера сборок
              properties:
                triggerType:
                  $ref: '#/components/schemas/TriggerType'
                repositoryData:
                  allOf:
                    - description: Данные о репозитории, для которого собираются сборки
                    - $ref: '#/components/schemas/RepositoryData'
                branches:
                  $ref: '#/components/schemas/Branches'
                vcsTriggerData:
                  allOf:
                    - description: |
                        Данные о триггере по Vcs.
                        Присутствуют в случае, если выбран тип триггера - Vcs
                    - $ref: '#/components/schemas/VcsTriggerData'
                scheduledTriggerData:
                  allOf:
                    - description: |
                        Данные о триггере по расписанию.
                        Присутствуют в случае, если выбран тип триггера - Scheduled
                    - $ref: '#/components/schemas/ScheduledTriggerData'
              required:
                - triggerType
                - repositoryData
                - branches
      responses:
        200:
          description: Ответ на запрос на создание нового триггера
          content:
            application/json:
              schema:
                type: object
                title: CreateBuildTriggerResponse
                description: Ответ на запрос на создание нового триггера
                properties:
                  id:
                    allOf:
                      - description: Уникальный идентификатор созданного триггера
                      - $ref: '#/components/schemas/TriggerId'
        400:
          $ref: '#/components/schemas/InvalidArgument'
        500:
          $ref: '#/components/schemas/TechnicalError'

  /trigger/update:
    put:
      tags:
        - Trigger
      description: Обновление данных существующего триггера сборок
      summary: Обновление данных существующего триггера сборок
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: UpdateBuildTriggerRequest
              description: Запрос на обновление данных существующего триггера
              properties:
                id:
                  allOf:
                    - $ref: '#/components/schemas/TriggerId'
                    - description: Уникальный идентификатор триггера, который необходимо обновить
                triggerType:
                  $ref: '#/components/schemas/TriggerType'
                repositoryData:
                  allOf:
                    - description: Данные о репозитории, для которого собираются сборки
                    - $ref: '#/components/schemas/RepositoryData'
                branches:
                  $ref: '#/components/schemas/Branches'
                vcsTriggerData:
                  allOf:
                    - description: |
                        Данные о триггере по Vcs.
                        Присутствуют в случае, если выбран тип триггера - Vcs
                    - $ref: '#/components/schemas/VcsTriggerData'
                scheduledTriggerData:
                  allOf:
                    - description: |
                        Данные о триггере по расписанию.
                        Присутствуют в случае, если выбран тип триггера - Scheduled
                    - $ref: '#/components/schemas/ScheduledTriggerData'
              required:
                - id
                - triggerType
                - repositoryData
                - branches
      responses:
        200:
          description: Ответ на запрос на обновление данных существующего триггера
          content:
            application/json:
              schema:
                type: object
                title: UpdateBuildTriggerResponse
                description: Ответ на запрос на обновление данных существующего триггера
                allOf:
                  - $ref: '#/components/schemas/BuildTriggerExtendedData'
        400:
          $ref: '#/components/schemas/InvalidArgument'
        422:
          description: Произошла логическая ошибка при обработке запроса
          content:
            application/json:
              schema:
                type: object
                description: Логические ошибки выполнения запроса
                title: UpdateBuildTriggerError
                properties:
                  code:
                    type: string
                    description: |
                      Коды ошибок:
                        * TriggerNotFound - Триггер не найден по идентификатору
                        * TriggerIsLocked - Триггер заблокирован, необходимо повторить операцию позже
                    enum:
                      - TriggerNotFound
                      - TriggerIsLocked
                    example: TriggerIsLocked
                  message:
                    type: string
                    description: Краткое описание ошибки
                required:
                  - code
        500:
          $ref: '#/components/schemas/TechnicalError'

components:
  schemas:
    BuildTriggerExtendedData:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/TriggerId'
        triggerType:
          $ref: '#/components/schemas/TriggerType'
        repositoryData:
          allOf:
            - description: Данные о репозитории, для которого собираются сборки
            - $ref: '#/components/schemas/RepositoryData'
        branches:
          $ref: '#/components/schemas/Branches'
        nextExecutionTime:
          allOf:
            - description: |
                Ближайшее время отработки триггера. 
                Как только текущее время будет больше или равно этому значению, начнётся обработка
            - $ref: '#/components/schemas/DateTime'
        created:
          allOf:
            - description: Дата создания триггера
            - $ref: '#/components/schemas/DateTime'
        updated:
          allOf:
            - description: Дата обновления триггера
            - $ref: '#/components/schemas/DateTime'
        vcsTriggerData:
          allOf:
            - description: |
                Данные о триггере по Vcs.
                Присутствуют в случае, если выбран тип триггера - Vcs
            - $ref: '#/components/schemas/VcsTriggerData'
        scheduledTriggerData:
          allOf:
            - description: |
                Данные о триггере по расписанию.
                Присутствуют в случае, если выбран тип триггера - Scheduled
            - $ref: '#/components/schemas/ScheduledTriggerData'
      required:
        - id
        - triggerType
        - repositoryData
        - branches
        - created
        - updated

    TriggerId:
      type: integer
      format: int64
      description: Уникальный идентификатор триггера
      example: 7

    TriggerType:
      type: string
      description: |
        Тип триггера сборок:
          * Vcs - Триггер сборок на основании изменения в репозитории
          * Scheduled - Триггер сборок по расписанию
      enum:
        - Vcs
        - Scheduled
      example: Scheduled

    RepositoryData:
      type: object
      description: Данные о репозитории, для которого собираются сборки
      properties:
        repositoryUrl:
          type: string
          description: Адрес репозитория, для которого должны собираться сборки
          example: https://github.com/project-name/repo-name.git
        username:
          type: string
          description: Имя пользователя репозитория
          example: username
        password:
          type: string
          description: |
            Пароль пользователя репозитория.
            Вместо пароля может быть передать access-токен, сгенерированный владельцем.
            Например, в GitHub токен генерируется в разделе Settings --> Developer settings --> Personal access tokens.
          example: ghp_s3A5Tvvk87PFawrJ5EetPtHEyya1to5MuPQi@
      required:
        - repositoryUrl
        - username
        - password

    Branches:
      type: array
      description: Ветки, для которых триггерятся сборки
      items:
        type: string
        description: Название ветки
        example: refs/heads/main

    DateTime:
      type: string
      format: date-time
      example: 2023-01-22T09:51:34.213313+03:00

    VcsTriggerData:
      type: object
      description: Данные о триггере, работающему по событиям изменения в Vcs
      properties:
        synchronizationMode:
          $ref: '#/components/schemas/VcsTriggerSynchronizationMode'
        executionByTimeData:
          allOf:
            - description: |
                Данные об исполнении по времени.
                Присутствуют в случае, если выбран режим синхронизации - Poll.
            - $ref: '#/components/schemas/ExecutionByTimeData'
      required:
        - synchronizationMode

    ScheduledTriggerData:
      type: object
      description: Данные о триггере, работающему по расписанию.
      properties:
        executionByTimeData:
          allOf:
            - description: |
                Данные об исполнении по времени.
                Присутствуют в случае, если выбран режим синхронизации - Poll.
            - $ref: '#/components/schemas/ExecutionByTimeData'
      required:
        - executionByTimeData

    VcsTriggerSynchronizationMode:
      type: string
      description: |
        Режим синхронизации с репозиторием для типа триггера - Vcs:
          * Poll - Режим, при котором сервис сам обращается к VCS для того, чтобы выяснить, были ли изменения
      enum:
        - Poll
      example: Poll

    ExecutionByTimeData:
      type: object
      description: Данные об исполнении по времени
      properties:
        intervalType:
          $ref: '#/components/schemas/ExecutionIntervalType'
        cron:
          type: string
          description: |
            Cron, по которому считается следующее время выполнения, в формате Quartz.
            Присутствует в случае, если выбран intervalType - Cron (исполнение по cron).
          example: 0/1 0 * ? * * *
        fixedRateInterval:
          type: string
          description: |
            Фиксированный промежуток времени, по которому считается следующее время выполнения.
            Формат - строковое представление формата ISO 8601 вида PnDTnHnMn.
            Присутствует в случае, если выбран intervalType - FixedRate (исполнение через фиксированный промежуток времени).
          example: PT1M
      required:
        - intervalType

    ExecutionIntervalType:
      type: string
      description: |
        Тип временного интервала:
          * FixedRate - Фиксированный промежуток времени. Например, каждую минуту.
          * Cron - Cron-выражение
      enum:
        - FixedRate
        - Cron
      example: Cron

    InvalidArgument:
      description: Запрос не может быть выполнен из-за ошибок в полях запроса

    TechnicalError:
      description: Техническая ошибка сервиса. Результат выполнения запроса неизвестен.